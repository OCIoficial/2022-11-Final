# This is a sample testplan. Each line specifies a command to generate a single test case.
# When executing the testplan, ocimatic will take care of choosing a name for the file
# and placing it in the correct directory.

# The first column in each line is the "group name". This is supposed to briefly describe how the
# test was generated or what is suppose to be testing. The group name will be used as part of the
# name of the generated test file. This is useful when debugging solutions to be able to see at a
# glance in which test cases the solution is failing. It should also inform a reader of the
# testplan the purpose of each test.

# The second column specifies a command to generate the test case. A command could be either `copy`
# `echo` or a generator script.

# `copy`: The copy command takes a single argument: a path to a file to copy. The path should be
# relative to the root of the current task.

# `echo`: This command takes one or more arguments and prints them in a single line. This is useful
# for tasks where the input consist of a single line to quickly generate test cases manually.

# `script`: A generator script is a file in either python (extension `.py`) or c++ (extension `.cpp`).
# The file should be placed in `attic/` next to this file. When processing the testplan ocimatic will
# run the script with the provided arguments (sys.argv or **argv). The script should then write
# to the standard output.
# Generator scripts typically use randomness. To ensure each execution of the testplan generates the
# same results a script should set the random seed to a fixed value. To this end, ocimatic passes an
# additional (hidden) argument to each invocation which is guaranteed to be different each time.
# The generator should use this extra argument to generate the random seed. The extra argument is
# passed as the first argument meaning that the rest of the arguments are "shifted" in one position.

[Subtask 1 - validators/st1.cpp]

  # POSSIBLE

  possible_sample ; copy statement/sample-1.in

  possible_ai_tie ; ai.py 5 tie
  possible_ai_tie ; ai.py 4 tie

  possible_ai_win ; ai.py 5 win
  possible_ai_win ; ai.py 6 win
  possible_ai_win ; ai.py 7 win
  possible_ai_win ; ai.py 8 win
  possible_ai_win ; ai.py 9 win
  possible_ai_win ; ai.py 10 win

  possible_7_in_line_row ; copy attic/manual/possible/7_in_line_row.txt
  possible_7_in_line_col; copy attic/manual/possible/7_in_line_col.txt
  possible_row_and_col ; copy attic/manual/possible/row_and_col_1.txt
  possible_row_and_col ; copy attic/manual/possible/row_and_col_2.txt
  possible_row_and_col_max ; copy attic/manual/possible/row_and_col_max.txt

  # IMPOSSIBLE

  impossible_sample ; copy statement/sample-2.in

  impossible_8_in_line ; copy attic/manual/impossible/8_in_line.txt
  impossible_multi_4_in_line ; copy attic/manual/impossible/multi_4_in_line.txt
  impossible_too_many_o ; copy attic/manual/impossible/too_many_o.txt
  impossible_too_many_x ; copy attic/manual/impossible/too_many_x.txt
  impossible_only_o ; copy attic/manual/impossible/only_o.txt
  impossible_only_x ; copy attic/manual/impossible/only_x.txt
  impossible_x_win_too_early ; copy attic/manual/impossible/x_win_too_early.txt
  impossible_row_and_col ; copy attic/manual/impossible/row_and_col.txt

  impossible_rand ; rand.py 4 impossible
  impossible_rand ; rand.py 6 impossible
  impossible_rand ; rand.py 8 impossible
  impossible_rand ; rand.py 10 impossible
  impossible_rand ; rand.py 10 impossible

